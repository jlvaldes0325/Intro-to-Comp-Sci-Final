import random

class Character:
    def __init__(self, name, speed, attack):
        self.name = name
        self.speed = speed
        self.attack = attack

    def roll_stats(self):
        self.speed += random.randint(1, 6)
        self.attack += random.randint(1, 6)

    def show_stats(self):
        print(f"King {self.name}'s Party Base Stats - Speed: {self.speed}, Attack: {self.attack}")

class PartyMember:
    def __init__(self, name, base_attack, base_speed, base_luck):
        self.name = name
        self.base_attack = base_attack
        self.base_speed = base_speed
        self.base_luck = base_luck
        self.attack_bonus = base_attack  # Start with base attack as bonus
        self.speed_bonus = base_speed   # Start with base speed as bonus
        self.luck_bonus = base_luck     # Start with base luck as bonus
        self.is_alive = True

    def die(self):
        self.is_alive = False

    def show_stats(self):
        print(f"{self.name}'s Stats - Attack Bonus: {self.attack_bonus}, Speed Bonus: {self.speed_bonus}, Luck Bonus: {self.luck_bonus}")

def create_enemy(wave_number):
    base_health = random.randint(5, 20)
    base_evasiveness = random.randint(1, 10)

    # Increase difficulty with each wave
    wave_multiplier = 1 + 0.1 * wave_number + random.uniform(0, 0.1)

    if wave_number % 5 == 0:
        # Exponentially increase difficulty every 5 waves
        wave_multiplier = wave_multiplier ** (wave_number // 5)

    health_multiplier = wave_multiplier + random.uniform(-0.2, 0.2)
    evasiveness_multiplier = wave_multiplier + random.uniform(-0.1, 0.1)

    return {
        'health': max(1, int(base_health * health_multiplier)),
        'evasiveness': max(1, int(base_evasiveness * evasiveness_multiplier)),
    }

def attack_enemy(player, party_member, enemy):
    character_attack = player.attack + party_member.attack_bonus
    character_speed = player.speed + party_member.speed_bonus

    enemy_health = enemy['health']
    enemy_evasiveness = enemy['evasiveness']

    if character_attack > enemy_health and character_speed > enemy_evasiveness:
        print(f"{player.name} defeats the enemy!")

        # Increase buffs after winning a fight
        party_member.attack_bonus += random.randint(1, 3)
        party_member.speed_bonus += random.randint(1, 3)
        party_member.luck_bonus += random.randint(1, 3)

        return True
    else:
        print(f"{player.name} misses the attack. Enemy health: {enemy_health}, Enemy evasiveness: {enemy_evasiveness}")
        party_member.die()
        return False

def get_valid_input(message, valid_options):
    while True:
        user_input = input(message)
        if user_input.isnumeric() and int(user_input) in valid_options:
            return int(user_input)
        else:
            print("Invalid input. Please enter a valid number.")

def game():
    player_name = input("How Shall We Address you Sire?: ")
    player = Character(player_name, 5, 5)
    wizard = PartyMember("Wizard", 1, 3, 1)
    knight = PartyMember("Knight", 3, 1, 0)
    archer = PartyMember("Archer", 2, 2, 1)

    party = [wizard, knight, archer]

    wave_count = 1
    win_wave = 15

    while any(member.is_alive for member in party) and wave_count <= win_wave:
        print(f"\n=== Wave {wave_count} ===")

        # Roll stats for player
        player.roll_stats()
        player.show_stats()

        # Display stats for available fighters
        print("\nAvailable fighters and their stats:")
        available_indices = [i for i, char_class in enumerate(party) if char_class.is_alive]
        for i, index in enumerate(available_indices, start=1):
            char_class = party[index]
            print(f"{i}. {char_class.name}")
            char_class.show_stats()

        if not available_indices:
            print("All fighters have fallen. Advancing to the next wave.")
            wave_count += 1
            for member in party:
                member.is_alive = True
            continue

        # Prompt for the selection of an available fighter
        class_choice = get_valid_input("Enter the number of the fighter: ", range(1, len(available_indices) + 1))
        selected_class = party[available_indices[class_choice - 1]]

        # Create enemy for the wave
        enemy = create_enemy(wave_count)
        print(f"\nAn enemy appears - Health: {enemy['health']}, Evasiveness: {enemy['evasiveness']}")

        # Player attacks the enemy
        if attack_enemy(player, selected_class, enemy):
            wave_count += 1
        else:
            print(f"{selected_class.name} has fallen!")

            # Check if all party members have died
            if not any(member.is_alive for member in party):
                print("All party members have fallen. Game Over.")
                return

            # Roll stats for the enemy
            enemy['health'] += random.randint(1, 6)
            enemy['evasiveness'] += random.randint(1, 6)

    if wave_count > win_wave:
        print(f"Congratulations! You have defeated all {win_wave} waves and won the game!")

if __name__ == "__main__":
    game()
